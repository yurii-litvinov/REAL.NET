//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ocl.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class OclParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, Stereotype=47, NAME=48, NUMBER=49, WS=50;
	public const int
		RULE_oclFile = 0, RULE_packageName = 1, RULE_oclExpressions = 2, RULE_constraint = 3, 
		RULE_contextDeclaration = 4, RULE_classifierContext = 5, RULE_operationContext = 6, 
		RULE_operationName = 7, RULE_formalParameterList = 8, RULE_typeSpecifier = 9, 
		RULE_collectionType = 10, RULE_oclExpression = 11, RULE_returnType = 12, 
		RULE_expression = 13, RULE_letExpression = 14, RULE_ifExpression = 15, 
		RULE_implExpression = 16, RULE_orExpression = 17, RULE_andExpression = 18, 
		RULE_eqExpression = 19, RULE_relationalExpression = 20, RULE_additiveExpression = 21, 
		RULE_multiplicativeExpression = 22, RULE_unaryExpression = 23, RULE_postfixExpression = 24, 
		RULE_primaryExpression = 25, RULE_propertyCallParameters = 26, RULE_literal = 27, 
		RULE_stringLiteral = 28, RULE_enumLiteral = 29, RULE_simpleTypeSpecifier = 30, 
		RULE_literalCollection = 31, RULE_collectionItem = 32, RULE_propertyCall = 33, 
		RULE_qualifiers = 34, RULE_declarator = 35, RULE_pathName = 36, RULE_timeExpression = 37, 
		RULE_actualParameterList = 38, RULE_orOperator = 39, RULE_collectionKind = 40, 
		RULE_eqOperator = 41, RULE_relationalOperator = 42, RULE_addOperator = 43, 
		RULE_multiplyOperator = 44, RULE_unaryOperator = 45, RULE_booleanLiteral = 46;
	public static readonly string[] ruleNames = {
		"oclFile", "packageName", "oclExpressions", "constraint", "contextDeclaration", 
		"classifierContext", "operationContext", "operationName", "formalParameterList", 
		"typeSpecifier", "collectionType", "oclExpression", "returnType", "expression", 
		"letExpression", "ifExpression", "implExpression", "orExpression", "andExpression", 
		"eqExpression", "relationalExpression", "additiveExpression", "multiplicativeExpression", 
		"unaryExpression", "postfixExpression", "primaryExpression", "propertyCallParameters", 
		"literal", "stringLiteral", "enumLiteral", "simpleTypeSpecifier", "literalCollection", 
		"collectionItem", "propertyCall", "qualifiers", "declarator", "pathName", 
		"timeExpression", "actualParameterList", "orOperator", "collectionKind", 
		"eqOperator", "relationalOperator", "addOperator", "multiplyOperator", 
		"unaryOperator", "booleanLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'package'", "'endpackage'", "'@'", "':'", "'context'", "'::'", 
		"'('", "')'", "'='", "'+'", "'-'", "'<'", "'<='", "'>='", "'>'", "'/'", 
		"'*'", "'<>'", "'implies'", "'not'", "'or'", "'xor'", "'and'", "','", 
		"'let'", "';'", "'if'", "'then'", "'else'", "'endif'", "'.'", "'->'", 
		"'\"'", "'{'", "'}'", "'..'", "'['", "']'", "'|'", "'pre'", "'Set'", "'Bag'", 
		"'Sequence'", "'Collection'", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "Stereotype", 
		"NAME", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ocl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static OclParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OclParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OclParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class OclFileContext : ParserRuleContext {
		public PackageNameContext[] packageName() {
			return GetRuleContexts<PackageNameContext>();
		}
		public PackageNameContext packageName(int i) {
			return GetRuleContext<PackageNameContext>(i);
		}
		public OclExpressionsContext[] oclExpressions() {
			return GetRuleContexts<OclExpressionsContext>();
		}
		public OclExpressionsContext oclExpressions(int i) {
			return GetRuleContext<OclExpressionsContext>(i);
		}
		public OclFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oclFile; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOclFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OclFileContext oclFile() {
		OclFileContext _localctx = new OclFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_oclFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 94; Match(T__0);
				State = 95; packageName();
				State = 96; oclExpressions();
				State = 97; Match(T__1);
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageNameContext : ParserRuleContext {
		public PathNameContext pathName() {
			return GetRuleContext<PathNameContext>(0);
		}
		public PackageNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageNameContext packageName() {
		PackageNameContext _localctx = new PackageNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_packageName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; pathName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OclExpressionsContext : ParserRuleContext {
		public ConstraintContext[] constraint() {
			return GetRuleContexts<ConstraintContext>();
		}
		public ConstraintContext constraint(int i) {
			return GetRuleContext<ConstraintContext>(i);
		}
		public OclExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oclExpressions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOclExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OclExpressionsContext oclExpressions() {
		OclExpressionsContext _localctx = new OclExpressionsContext(Context, State);
		EnterRule(_localctx, 4, RULE_oclExpressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 105; constraint();
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		public ContextDeclarationContext contextDeclaration() {
			return GetRuleContext<ContextDeclarationContext>(0);
		}
		public ITerminalNode[] Stereotype() { return GetTokens(OclParser.Stereotype); }
		public ITerminalNode Stereotype(int i) {
			return GetToken(OclParser.Stereotype, i);
		}
		public ITerminalNode[] NUMBER() { return GetTokens(OclParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(OclParser.NUMBER, i);
		}
		public OclExpressionContext[] oclExpression() {
			return GetRuleContexts<OclExpressionContext>();
		}
		public OclExpressionContext oclExpression(int i) {
			return GetRuleContext<OclExpressionContext>(i);
		}
		public ITerminalNode[] NAME() { return GetTokens(OclParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(OclParser.NAME, i);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(Context, State);
		EnterRule(_localctx, 6, RULE_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; contextDeclaration();
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 112; Match(Stereotype);
				State = 113; Match(T__2);
				State = 114; Match(NUMBER);
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 115; Match(NAME);
					}
				}

				State = 118; Match(T__3);
				State = 119; oclExpression();
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Stereotype );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextDeclarationContext : ParserRuleContext {
		public OperationContextContext operationContext() {
			return GetRuleContext<OperationContextContext>(0);
		}
		public ClassifierContextContext classifierContext() {
			return GetRuleContext<ClassifierContextContext>(0);
		}
		public ContextDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextDeclarationContext contextDeclaration() {
		ContextDeclarationContext _localctx = new ContextDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_contextDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(T__4);
			State = 127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 125; operationContext();
				}
				break;
			case 2:
				{
				State = 126; classifierContext();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassifierContextContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(OclParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(OclParser.NAME, i);
		}
		public ClassifierContextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classifierContext; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassifierContext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassifierContextContext classifierContext() {
		ClassifierContextContext _localctx = new ClassifierContextContext(Context, State);
		EnterRule(_localctx, 10, RULE_classifierContext);
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 129; Match(NAME);
				State = 130; Match(T__3);
				State = 131; Match(NAME);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContextContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(OclParser.NAME, 0); }
		public OperationNameContext operationName() {
			return GetRuleContext<OperationNameContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public OperationContextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationContext; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationContext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContextContext operationContext() {
		OperationContextContext _localctx = new OperationContextContext(Context, State);
		EnterRule(_localctx, 12, RULE_operationContext);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(NAME);
			State = 136; Match(T__5);
			State = 137; operationName();
			State = 138; Match(T__6);
			State = 139; formalParameterList();
			State = 140; Match(T__7);
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 141; Match(T__3);
				State = 142; returnType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(OclParser.NAME, 0); }
		public OperationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationNameContext operationName() {
		OperationNameContext _localctx = new OperationNameContext(Context, State);
		EnterRule(_localctx, 14, RULE_operationName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << NAME))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(OclParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(OclParser.NAME, i);
		}
		public TypeSpecifierContext[] typeSpecifier() {
			return GetRuleContexts<TypeSpecifierContext>();
		}
		public TypeSpecifierContext typeSpecifier(int i) {
			return GetRuleContext<TypeSpecifierContext>(i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 16, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 147; Match(NAME);
				State = 148; Match(T__3);
				State = 149; typeSpecifier();
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__23) {
					{
					{
					State = 150; Match(T__23);
					State = 151; Match(NAME);
					State = 152; Match(T__3);
					State = 153; typeSpecifier();
					}
					}
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public SimpleTypeSpecifierContext simpleTypeSpecifier() {
			return GetRuleContext<SimpleTypeSpecifierContext>(0);
		}
		public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeSpecifier);
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161; simpleTypeSpecifier();
				}
				break;
			case T__40:
			case T__41:
			case T__42:
			case T__43:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162; collectionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionTypeContext : ParserRuleContext {
		public CollectionKindContext collectionKind() {
			return GetRuleContext<CollectionKindContext>(0);
		}
		public SimpleTypeSpecifierContext simpleTypeSpecifier() {
			return GetRuleContext<SimpleTypeSpecifierContext>(0);
		}
		public CollectionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionTypeContext collectionType() {
		CollectionTypeContext _localctx = new CollectionTypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_collectionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; collectionKind();
			State = 166; Match(T__6);
			State = 167; simpleTypeSpecifier();
			State = 168; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OclExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LetExpressionContext[] letExpression() {
			return GetRuleContexts<LetExpressionContext>();
		}
		public LetExpressionContext letExpression(int i) {
			return GetRuleContext<LetExpressionContext>(i);
		}
		public OclExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oclExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOclExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OclExpressionContext oclExpression() {
		OclExpressionContext _localctx = new OclExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_oclExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__24) {
				{
				{
				State = 170; letExpression();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 176; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_returnType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; typeSpecifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ImplExpressionContext implExpression() {
			return GetRuleContext<ImplExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; implExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetExpressionContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(OclParser.NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public LetExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetExpressionContext letExpression() {
		LetExpressionContext _localctx = new LetExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_letExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(T__24);
			State = 183; Match(NAME);
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 184; Match(T__6);
				State = 185; formalParameterList();
				State = 186; Match(T__7);
				}
			}

			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 190; Match(T__3);
				State = 191; typeSpecifier();
				}
			}

			State = 194; Match(T__8);
			State = 195; expression();
			State = 196; Match(T__25);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(T__26);
			State = 199; expression();
			State = 200; Match(T__27);
			State = 201; expression();
			State = 202; Match(T__28);
			State = 203; expression();
			State = 204; Match(T__29);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplExpressionContext : ParserRuleContext {
		public OrExpressionContext[] orExpression() {
			return GetRuleContexts<OrExpressionContext>();
		}
		public OrExpressionContext orExpression(int i) {
			return GetRuleContext<OrExpressionContext>(i);
		}
		public ImplExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplExpressionContext implExpression() {
		ImplExpressionContext _localctx = new ImplExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_implExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; orExpression();
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__18) {
				{
				{
				State = 207; Match(T__18);
				State = 208; orExpression();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext {
		public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		public OrOperatorContext[] orOperator() {
			return GetRuleContexts<OrOperatorContext>();
		}
		public OrOperatorContext orOperator(int i) {
			return GetRuleContext<OrOperatorContext>(i);
		}
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression() {
		OrExpressionContext _localctx = new OrExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_orExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; andExpression();
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__20 || _la==T__21) {
				{
				{
				State = 215; orOperator();
				State = 216; andExpression();
				}
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public EqExpressionContext[] eqExpression() {
			return GetRuleContexts<EqExpressionContext>();
		}
		public EqExpressionContext eqExpression(int i) {
			return GetRuleContext<EqExpressionContext>(i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; eqExpression();
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__22) {
				{
				{
				State = 224; Match(T__22);
				State = 225; eqExpression();
				}
				}
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqExpressionContext : ParserRuleContext {
		public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		public EqOperatorContext[] eqOperator() {
			return GetRuleContexts<EqOperatorContext>();
		}
		public EqOperatorContext eqOperator(int i) {
			return GetRuleContext<EqOperatorContext>(i);
		}
		public EqExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eqExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqExpressionContext eqExpression() {
		EqExpressionContext _localctx = new EqExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_eqExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; relationalExpression();
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8 || _la==T__17) {
				{
				{
				State = 232; eqOperator();
				State = 233; relationalExpression();
				}
				}
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		public RelationalOperatorContext relationalOperator() {
			return GetRuleContext<RelationalOperatorContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; additiveExpression();
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14))) != 0)) {
				{
				State = 241; relationalOperator();
				State = 242; additiveExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		public AddOperatorContext[] addOperator() {
			return GetRuleContexts<AddOperatorContext>();
		}
		public AddOperatorContext addOperator(int i) {
			return GetRuleContext<AddOperatorContext>(i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; multiplicativeExpression();
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9 || _la==T__10) {
				{
				{
				State = 247; addOperator();
				State = 248; multiplicativeExpression();
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public MultiplyOperatorContext[] multiplyOperator() {
			return GetRuleContexts<MultiplyOperatorContext>();
		}
		public MultiplyOperatorContext multiplyOperator(int i) {
			return GetRuleContext<MultiplyOperatorContext>(i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; unaryExpression();
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15 || _la==T__16) {
				{
				{
				State = 256; multiplyOperator();
				State = 257; unaryExpression();
				}
				}
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_unaryExpression);
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 264; unaryOperator();
				State = 265; postfixExpression();
				}
				}
				break;
			case T__6:
			case T__26:
			case T__32:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case NAME:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 267; postfixExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public PropertyCallContext[] propertyCall() {
			return GetRuleContexts<PropertyCallContext>();
		}
		public PropertyCallContext propertyCall(int i) {
			return GetRuleContext<PropertyCallContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_postfixExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; primaryExpression();
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__30 || _la==T__31) {
				{
				{
				State = 271;
				_la = TokenStream.LA(1);
				if ( !(_la==T__30 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 272; propertyCall();
				}
				}
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public LiteralCollectionContext literalCollection() {
			return GetRuleContext<LiteralCollectionContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public PropertyCallContext propertyCall() {
			return GetRuleContext<PropertyCallContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_primaryExpression);
		try {
			State = 286;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278; literalCollection();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 279; literal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 280; propertyCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 281; Match(T__6);
				State = 282; expression();
				State = 283; Match(T__7);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 285; ifExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyCallParametersContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public ActualParameterListContext actualParameterList() {
			return GetRuleContext<ActualParameterListContext>(0);
		}
		public PropertyCallParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyCallParameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyCallParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyCallParametersContext propertyCallParameters() {
		PropertyCallParametersContext _localctx = new PropertyCallParametersContext(Context, State);
		EnterRule(_localctx, 52, RULE_propertyCallParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(T__6);
			State = 290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 289; declarator();
				}
				break;
			}
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__10) | (1L << T__19) | (1L << T__26) | (1L << T__32) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << NAME) | (1L << NUMBER))) != 0)) {
				{
				State = 292; actualParameterList();
				}
			}

			State = 295; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(OclParser.NUMBER, 0); }
		public EnumLiteralContext enumLiteral() {
			return GetRuleContext<EnumLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 54, RULE_literal);
		try {
			State = 301;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 297; Match(NUMBER);
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 298; enumLiteral();
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 3);
				{
				State = 299; stringLiteral();
				}
				break;
			case T__44:
			case T__45:
				EnterOuterAlt(_localctx, 4);
				{
				State = 300; booleanLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(OclParser.NUMBER, 0); }
		public ITerminalNode NAME() { return GetToken(OclParser.NAME, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 56, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; Match(T__32);
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME || _la==NUMBER) {
				{
				State = 304;
				_la = TokenStream.LA(1);
				if ( !(_la==NAME || _la==NUMBER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 307; Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumLiteralContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(OclParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(OclParser.NAME, i);
		}
		public EnumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumLiteralContext enumLiteral() {
		EnumLiteralContext _localctx = new EnumLiteralContext(Context, State);
		EnterRule(_localctx, 58, RULE_enumLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; Match(NAME);
			State = 310; Match(T__5);
			State = 311; Match(NAME);
			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 312; Match(T__5);
				State = 313; Match(NAME);
				}
				}
				State = 318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeSpecifierContext : ParserRuleContext {
		public PathNameContext pathName() {
			return GetRuleContext<PathNameContext>(0);
		}
		public SimpleTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeSpecifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeSpecifierContext simpleTypeSpecifier() {
		SimpleTypeSpecifierContext _localctx = new SimpleTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 60, RULE_simpleTypeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; pathName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralCollectionContext : ParserRuleContext {
		public CollectionKindContext collectionKind() {
			return GetRuleContext<CollectionKindContext>(0);
		}
		public CollectionItemContext[] collectionItem() {
			return GetRuleContexts<CollectionItemContext>();
		}
		public CollectionItemContext collectionItem(int i) {
			return GetRuleContext<CollectionItemContext>(i);
		}
		public LiteralCollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalCollection; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralCollectionContext literalCollection() {
		LiteralCollectionContext _localctx = new LiteralCollectionContext(Context, State);
		EnterRule(_localctx, 62, RULE_literalCollection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; collectionKind();
			State = 322; Match(T__33);
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__10) | (1L << T__19) | (1L << T__26) | (1L << T__32) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << NAME) | (1L << NUMBER))) != 0)) {
				{
				State = 323; collectionItem();
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__23) {
					{
					{
					State = 324; Match(T__23);
					State = 325; collectionItem();
					}
					}
					State = 330;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 333; Match(T__34);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionItemContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CollectionItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionItem; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionItemContext collectionItem() {
		CollectionItemContext _localctx = new CollectionItemContext(Context, State);
		EnterRule(_localctx, 64, RULE_collectionItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; expression();
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__35) {
				{
				State = 336; Match(T__35);
				State = 337; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyCallContext : ParserRuleContext {
		public PathNameContext pathName() {
			return GetRuleContext<PathNameContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(OclParser.NUMBER, 0); }
		public TimeExpressionContext timeExpression() {
			return GetRuleContext<TimeExpressionContext>(0);
		}
		public QualifiersContext qualifiers() {
			return GetRuleContext<QualifiersContext>(0);
		}
		public PropertyCallParametersContext propertyCallParameters() {
			return GetRuleContext<PropertyCallParametersContext>(0);
		}
		public PropertyCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyCallContext propertyCall() {
		PropertyCallContext _localctx = new PropertyCallContext(Context, State);
		EnterRule(_localctx, 66, RULE_propertyCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; pathName();
			State = 343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 341; Match(T__2);
				State = 342; Match(NUMBER);
				}
				break;
			}
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 345; timeExpression();
				}
			}

			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__36) {
				{
				State = 348; qualifiers();
				}
			}

			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 351; propertyCallParameters();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiersContext : ParserRuleContext {
		public ActualParameterListContext actualParameterList() {
			return GetRuleContext<ActualParameterListContext>(0);
		}
		public QualifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiers; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiersContext qualifiers() {
		QualifiersContext _localctx = new QualifiersContext(Context, State);
		EnterRule(_localctx, 68, RULE_qualifiers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354; Match(T__36);
			State = 355; actualParameterList();
			State = 356; Match(T__37);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(OclParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(OclParser.NAME, i);
		}
		public SimpleTypeSpecifierContext simpleTypeSpecifier() {
			return GetRuleContext<SimpleTypeSpecifierContext>(0);
		}
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 70, RULE_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358; Match(NAME);
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__23) {
				{
				{
				State = 359; Match(T__23);
				State = 360; Match(NAME);
				}
				}
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 366; Match(T__3);
				State = 367; simpleTypeSpecifier();
				}
			}

			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25) {
				{
				State = 370; Match(T__25);
				State = 371; Match(NAME);
				State = 372; Match(T__3);
				State = 373; typeSpecifier();
				State = 374; Match(T__8);
				State = 375; expression();
				}
			}

			State = 379; Match(T__38);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathNameContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(OclParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(OclParser.NAME, i);
		}
		public PathNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathNameContext pathName() {
		PathNameContext _localctx = new PathNameContext(Context, State);
		EnterRule(_localctx, 72, RULE_pathName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381; Match(NAME);
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 382; Match(T__5);
				State = 383; Match(NAME);
				}
				}
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeExpressionContext : ParserRuleContext {
		public TimeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeExpressionContext timeExpression() {
		TimeExpressionContext _localctx = new TimeExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_timeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; Match(T__2);
			State = 390; Match(T__39);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParameterListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ActualParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualParameterList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParameterListContext actualParameterList() {
		ActualParameterListContext _localctx = new ActualParameterListContext(Context, State);
		EnterRule(_localctx, 76, RULE_actualParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; expression();
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__23) {
				{
				{
				State = 393; Match(T__23);
				State = 394; expression();
				}
				}
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrOperatorContext : ParserRuleContext {
		public OrOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrOperatorContext orOperator() {
		OrOperatorContext _localctx = new OrOperatorContext(Context, State);
		EnterRule(_localctx, 78, RULE_orOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			_la = TokenStream.LA(1);
			if ( !(_la==T__20 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionKindContext : ParserRuleContext {
		public CollectionKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionKind; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionKindContext collectionKind() {
		CollectionKindContext _localctx = new CollectionKindContext(Context, State);
		EnterRule(_localctx, 80, RULE_collectionKind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqOperatorContext : ParserRuleContext {
		public EqOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eqOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqOperatorContext eqOperator() {
		EqOperatorContext _localctx = new EqOperatorContext(Context, State);
		EnterRule(_localctx, 82, RULE_eqOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalOperatorContext : ParserRuleContext {
		public RelationalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOperatorContext relationalOperator() {
		RelationalOperatorContext _localctx = new RelationalOperatorContext(Context, State);
		EnterRule(_localctx, 84, RULE_relationalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOperatorContext : ParserRuleContext {
		public AddOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOperatorContext addOperator() {
		AddOperatorContext _localctx = new AddOperatorContext(Context, State);
		EnterRule(_localctx, 86, RULE_addOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			_la = TokenStream.LA(1);
			if ( !(_la==T__9 || _la==T__10) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyOperatorContext : ParserRuleContext {
		public MultiplyOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyOperatorContext multiplyOperator() {
		MultiplyOperatorContext _localctx = new MultiplyOperatorContext(Context, State);
		EnterRule(_localctx, 88, RULE_multiplyOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			_la = TokenStream.LA(1);
			if ( !(_la==T__15 || _la==T__16) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 90, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__19) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOclVisitor<TResult> typedVisitor = visitor as IOclVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 92, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			_la = TokenStream.LA(1);
			if ( !(_la==T__44 || _la==T__45) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x34', '\x1A3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '\x66', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', 'g', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\a', '\x4', 
		'm', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'p', '\v', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', 'w', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '{', 
		'\n', '\x5', '\r', '\x5', '\xE', '\x5', '|', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\x82', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\x88', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', '\x92', '\n', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\a', '\n', '\x9D', '\n', '\n', '\f', '\n', 
		'\xE', '\n', '\xA0', '\v', '\n', '\x5', '\n', '\xA2', '\n', '\n', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\xA6', '\n', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\a', '\r', 
		'\xAE', '\n', '\r', '\f', '\r', '\xE', '\r', '\xB1', '\v', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\xBF', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xC3', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\xD4', '\n', 
		'\x12', '\f', '\x12', '\xE', '\x12', '\xD7', '\v', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xDD', '\n', 
		'\x13', '\f', '\x13', '\xE', '\x13', '\xE0', '\v', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xE5', '\n', '\x14', '\f', 
		'\x14', '\xE', '\x14', '\xE8', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xEE', '\n', '\x15', '\f', 
		'\x15', '\xE', '\x15', '\xF1', '\v', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xF7', '\n', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\xFD', 
		'\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x100', '\v', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x106', 
		'\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x109', '\v', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x10F', 
		'\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', 
		'\x114', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x117', '\v', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x121', '\n', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x125', '\n', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x128', '\n', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x130', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', 
		'\x134', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', '\x13D', 
		'\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x140', '\v', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\a', '!', '\x149', '\n', '!', '\f', '!', '\xE', '!', '\x14C', '\v', 
		'!', '\x5', '!', '\x14E', '\n', '!', '\x3', '!', '\x3', '!', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x5', '\"', '\x155', '\n', '\"', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x5', '#', '\x15A', '\n', '#', '\x3', '#', '\x5', 
		'#', '\x15D', '\n', '#', '\x3', '#', '\x5', '#', '\x160', '\n', '#', '\x3', 
		'#', '\x5', '#', '\x163', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\a', '%', '\x16C', '\n', 
		'%', '\f', '%', '\xE', '%', '\x16F', '\v', '%', '\x3', '%', '\x3', '%', 
		'\x5', '%', '\x173', '\n', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x17C', '\n', '%', 
		'\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\a', '&', 
		'\x183', '\n', '&', '\f', '&', '\xE', '&', '\x186', '\v', '&', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\a', 
		'(', '\x18E', '\n', '(', '\f', '(', '\xE', '(', '\x191', '\v', '(', '\x3', 
		')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', 
		',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', 
		'/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x2', '\x2', 
		'\x31', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '\x2', '\r', '\x4', '\x2', '\v', '\x19', '\x32', '\x32', 
		'\x3', '\x2', '!', '\"', '\x3', '\x2', '\x32', '\x33', '\x3', '\x2', '\x17', 
		'\x18', '\x3', '\x2', '+', '.', '\x4', '\x2', '\v', '\v', '\x14', '\x14', 
		'\x3', '\x2', '\xE', '\x11', '\x3', '\x2', '\f', '\r', '\x3', '\x2', '\x12', 
		'\x13', '\x4', '\x2', '\r', '\r', '\x16', '\x16', '\x3', '\x2', '/', '\x30', 
		'\x2', '\x1A0', '\x2', '\x65', '\x3', '\x2', '\x2', '\x2', '\x4', 'i', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 'n', '\x3', '\x2', '\x2', '\x2', '\b', 
		'q', '\x3', '\x2', '\x2', '\x2', '\n', '~', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x87', '\x3', '\x2', '\x2', '\x2', '\xE', '\x89', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x93', '\x3', '\x2', '\x2', '\x2', '\x12', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x18', '\xAF', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xB4', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xC8', '\x3', '\x2', '\x2', '\x2', '\"', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xD8', '\x3', '\x2', '\x2', '\x2', '&', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xE9', '\x3', '\x2', '\x2', '\x2', '*', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xF8', '\x3', '\x2', '\x2', '\x2', '.', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x110', '\x3', '\x2', '\x2', '\x2', '\x34', '\x120', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x122', '\x3', '\x2', '\x2', '\x2', '\x38', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x137', '\x3', '\x2', '\x2', '\x2', '>', '\x141', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x143', '\x3', '\x2', '\x2', '\x2', '\x42', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x156', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x164', '\x3', '\x2', '\x2', '\x2', 'H', '\x168', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x17F', '\x3', '\x2', '\x2', '\x2', 'L', '\x187', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x18A', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x192', '\x3', '\x2', '\x2', '\x2', 'R', '\x194', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x196', '\x3', '\x2', '\x2', '\x2', 'V', '\x198', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x19A', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x19C', '\x3', '\x2', '\x2', '\x2', '\\', '\x19E', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x1A0', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', 
		'\x3', '\x2', '\x2', '\x61', '\x62', '\x5', '\x4', '\x3', '\x2', '\x62', 
		'\x63', '\x5', '\x6', '\x4', '\x2', '\x63', '\x64', '\a', '\x4', '\x2', 
		'\x2', '\x64', '\x66', '\x3', '\x2', '\x2', '\x2', '\x65', '`', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', 
		'\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 
		'\x3', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x5', 'J', '&', '\x2', 'j', 
		'\x5', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\x5', '\b', '\x5', '\x2', 
		'l', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'p', '\x3', '\x2', '\x2', '\x2', 
		'n', 'l', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 
		'o', '\a', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'z', '\x5', '\n', '\x6', '\x2', 'r', 's', '\a', '\x31', '\x2', 
		'\x2', 's', 't', '\a', '\x5', '\x2', '\x2', 't', 'v', '\a', '\x33', '\x2', 
		'\x2', 'u', 'w', '\a', '\x32', '\x2', '\x2', 'v', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\a', '\x6', '\x2', '\x2', 'y', '{', '\x5', '\x18', '\r', 
		'\x2', 'z', 'r', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', 
		'\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', 
		'\x2', '}', '\t', '\x3', '\x2', '\x2', '\x2', '~', '\x81', '\a', '\a', 
		'\x2', '\x2', '\x7F', '\x82', '\x5', '\xE', '\b', '\x2', '\x80', '\x82', 
		'\x5', '\f', '\a', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x84', '\a', '\x32', '\x2', '\x2', '\x84', '\x85', 
		'\a', '\x6', '\x2', '\x2', '\x85', '\x88', '\a', '\x32', '\x2', '\x2', 
		'\x86', '\x88', '\a', '\x32', '\x2', '\x2', '\x87', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\a', '\x32', '\x2', '\x2', 
		'\x8A', '\x8B', '\a', '\b', '\x2', '\x2', '\x8B', '\x8C', '\x5', '\x10', 
		'\t', '\x2', '\x8C', '\x8D', '\a', '\t', '\x2', '\x2', '\x8D', '\x8E', 
		'\x5', '\x12', '\n', '\x2', '\x8E', '\x91', '\a', '\n', '\x2', '\x2', 
		'\x8F', '\x90', '\a', '\x6', '\x2', '\x2', '\x90', '\x92', '\x5', '\x1A', 
		'\xE', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x93', '\x94', '\t', '\x2', '\x2', '\x2', '\x94', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x96', '\a', '\x32', '\x2', '\x2', '\x96', '\x97', 
		'\a', '\x6', '\x2', '\x2', '\x97', '\x9E', '\x5', '\x14', '\v', '\x2', 
		'\x98', '\x99', '\a', '\x1A', '\x2', '\x2', '\x99', '\x9A', '\a', '\x32', 
		'\x2', '\x2', '\x9A', '\x9B', '\a', '\x6', '\x2', '\x2', '\x9B', '\x9D', 
		'\x5', '\x14', '\v', '\x2', '\x9C', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\x95', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\x13', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA6', 
		'\x5', '>', ' ', '\x2', '\xA4', '\xA6', '\x5', '\x16', '\f', '\x2', '\xA5', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\x15', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\x5', 
		'R', '*', '\x2', '\xA8', '\xA9', '\a', '\t', '\x2', '\x2', '\xA9', '\xAA', 
		'\x5', '>', ' ', '\x2', '\xAA', '\xAB', '\a', '\n', '\x2', '\x2', '\xAB', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAE', '\x5', '\x1E', '\x10', 
		'\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x5', 
		'\x1C', '\xF', '\x2', '\xB3', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB5', '\x5', '\x14', '\v', '\x2', '\xB5', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\x5', '\"', '\x12', '\x2', '\xB7', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', '\x1B', '\x2', '\x2', '\xB9', 
		'\xBE', '\a', '\x32', '\x2', '\x2', '\xBA', '\xBB', '\a', '\t', '\x2', 
		'\x2', '\xBB', '\xBC', '\x5', '\x12', '\n', '\x2', '\xBC', '\xBD', '\a', 
		'\n', '\x2', '\x2', '\xBD', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\a', 
		'\x6', '\x2', '\x2', '\xC1', '\xC3', '\x5', '\x14', '\v', '\x2', '\xC2', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', 
		'\v', '\x2', '\x2', '\xC5', '\xC6', '\x5', '\x1C', '\xF', '\x2', '\xC6', 
		'\xC7', '\a', '\x1C', '\x2', '\x2', '\xC7', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC9', '\a', '\x1D', '\x2', '\x2', '\xC9', '\xCA', '\x5', 
		'\x1C', '\xF', '\x2', '\xCA', '\xCB', '\a', '\x1E', '\x2', '\x2', '\xCB', 
		'\xCC', '\x5', '\x1C', '\xF', '\x2', '\xCC', '\xCD', '\a', '\x1F', '\x2', 
		'\x2', '\xCD', '\xCE', '\x5', '\x1C', '\xF', '\x2', '\xCE', '\xCF', '\a', 
		' ', '\x2', '\x2', '\xCF', '!', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD5', 
		'\x5', '$', '\x13', '\x2', '\xD1', '\xD2', '\a', '\x15', '\x2', '\x2', 
		'\xD2', '\xD4', '\x5', '$', '\x13', '\x2', '\xD3', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '#', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xD8', '\xDE', '\x5', '&', '\x14', '\x2', '\xD9', '\xDA', 
		'\x5', 'P', ')', '\x2', '\xDA', '\xDB', '\x5', '&', '\x14', '\x2', '\xDB', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xE6', '\x5', '(', '\x15', '\x2', '\xE2', '\xE3', '\a', 
		'\x19', '\x2', '\x2', '\xE3', '\xE5', '\x5', '(', '\x15', '\x2', '\xE4', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\'', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEF', '\x5', '*', '\x16', 
		'\x2', '\xEA', '\xEB', '\x5', 'T', '+', '\x2', '\xEB', '\xEC', '\x5', 
		'*', '\x16', '\x2', '\xEC', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xED', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', ')', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF6', '\x5', ',', '\x17', 
		'\x2', '\xF3', '\xF4', '\x5', 'V', ',', '\x2', '\xF4', '\xF5', '\x5', 
		',', '\x17', '\x2', '\xF5', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '+', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xFE', '\x5', 
		'.', '\x18', '\x2', '\xF9', '\xFA', '\x5', 'X', '-', '\x2', '\xFA', '\xFB', 
		'\x5', '.', '\x18', '\x2', '\xFB', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFD', '\x100', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '-', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\x101', '\x107', '\x5', '\x30', '\x19', 
		'\x2', '\x102', '\x103', '\x5', 'Z', '.', '\x2', '\x103', '\x104', '\x5', 
		'\x30', '\x19', '\x2', '\x104', '\x106', '\x3', '\x2', '\x2', '\x2', '\x105', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\x106', '\x109', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x105', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x107', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\x5', 
		'\\', '/', '\x2', '\x10B', '\x10C', '\x5', '\x32', '\x1A', '\x2', '\x10C', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10F', '\x5', '\x32', 
		'\x1A', '\x2', '\x10E', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x110', '\x115', '\x5', '\x34', '\x1B', '\x2', '\x111', '\x112', 
		'\t', '\x3', '\x2', '\x2', '\x112', '\x114', '\x5', '\x44', '#', '\x2', 
		'\x113', '\x111', '\x3', '\x2', '\x2', '\x2', '\x114', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\x113', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x116', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x117', '\x115', '\x3', '\x2', '\x2', '\x2', '\x118', '\x121', 
		'\x5', '@', '!', '\x2', '\x119', '\x121', '\x5', '\x38', '\x1D', '\x2', 
		'\x11A', '\x121', '\x5', '\x44', '#', '\x2', '\x11B', '\x11C', '\a', '\t', 
		'\x2', '\x2', '\x11C', '\x11D', '\x5', '\x1C', '\xF', '\x2', '\x11D', 
		'\x11E', '\a', '\n', '\x2', '\x2', '\x11E', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x121', '\x5', ' ', '\x11', '\x2', '\x120', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x120', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x121', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x122', '\x124', '\a', '\t', '\x2', 
		'\x2', '\x123', '\x125', '\x5', 'H', '%', '\x2', '\x124', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x125', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x126', '\x128', '\x5', 'N', '(', 
		'\x2', '\x127', '\x126', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x12A', '\a', '\n', '\x2', '\x2', '\x12A', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x12B', '\x130', '\a', '\x33', '\x2', '\x2', '\x12C', '\x130', 
		'\x5', '<', '\x1F', '\x2', '\x12D', '\x130', '\x5', ':', '\x1E', '\x2', 
		'\x12E', '\x130', '\x5', '^', '\x30', '\x2', '\x12F', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x12E', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x39', '\x3', '\x2', '\x2', '\x2', '\x131', '\x133', 
		'\a', '#', '\x2', '\x2', '\x132', '\x134', '\t', '\x4', '\x2', '\x2', 
		'\x133', '\x132', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x135', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\x136', '\a', '#', '\x2', '\x2', '\x136', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x137', '\x138', '\a', '\x32', '\x2', '\x2', '\x138', '\x139', '\a', 
		'\b', '\x2', '\x2', '\x139', '\x13E', '\a', '\x32', '\x2', '\x2', '\x13A', 
		'\x13B', '\a', '\b', '\x2', '\x2', '\x13B', '\x13D', '\a', '\x32', '\x2', 
		'\x2', '\x13C', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x140', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13F', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x140', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', 
		'\x5', 'J', '&', '\x2', '\x142', '?', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x144', '\x5', 'R', '*', '\x2', '\x144', '\x14D', '\a', '$', '\x2', '\x2', 
		'\x145', '\x14A', '\x5', '\x42', '\"', '\x2', '\x146', '\x147', '\a', 
		'\x1A', '\x2', '\x2', '\x147', '\x149', '\x5', '\x42', '\"', '\x2', '\x148', 
		'\x146', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14C', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', 
		'\x3', '\x2', '\x2', '\x2', '\x14B', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'\x14C', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x145', '\x3', 
		'\x2', '\x2', '\x2', '\x14D', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x14E', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\a', '%', '\x2', 
		'\x2', '\x150', '\x41', '\x3', '\x2', '\x2', '\x2', '\x151', '\x154', 
		'\x5', '\x1C', '\xF', '\x2', '\x152', '\x153', '\a', '&', '\x2', '\x2', 
		'\x153', '\x155', '\x5', '\x1C', '\xF', '\x2', '\x154', '\x152', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\x155', '\x3', '\x2', '\x2', '\x2', '\x155', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x156', '\x159', '\x5', 'J', '&', 
		'\x2', '\x157', '\x158', '\a', '\x5', '\x2', '\x2', '\x158', '\x15A', 
		'\a', '\x33', '\x2', '\x2', '\x159', '\x157', '\x3', '\x2', '\x2', '\x2', 
		'\x159', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15C', '\x3', 
		'\x2', '\x2', '\x2', '\x15B', '\x15D', '\x5', 'L', '\'', '\x2', '\x15C', 
		'\x15B', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x15D', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x160', 
		'\x5', '\x46', '$', '\x2', '\x15F', '\x15E', '\x3', '\x2', '\x2', '\x2', 
		'\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', '\x160', '\x162', '\x3', 
		'\x2', '\x2', '\x2', '\x161', '\x163', '\x5', '\x36', '\x1C', '\x2', '\x162', 
		'\x161', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x163', '\x45', '\x3', '\x2', '\x2', '\x2', '\x164', '\x165', 
		'\a', '\'', '\x2', '\x2', '\x165', '\x166', '\x5', 'N', '(', '\x2', '\x166', 
		'\x167', '\a', '(', '\x2', '\x2', '\x167', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x16D', '\a', '\x32', '\x2', '\x2', '\x169', '\x16A', '\a', 
		'\x1A', '\x2', '\x2', '\x16A', '\x16C', '\a', '\x32', '\x2', '\x2', '\x16B', 
		'\x169', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16F', '\x3', '\x2', '\x2', 
		'\x2', '\x16D', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x172', '\x3', '\x2', '\x2', '\x2', 
		'\x16F', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\a', 
		'\x6', '\x2', '\x2', '\x171', '\x173', '\x5', '>', ' ', '\x2', '\x172', 
		'\x170', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\x173', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', 
		'\a', '\x1C', '\x2', '\x2', '\x175', '\x176', '\a', '\x32', '\x2', '\x2', 
		'\x176', '\x177', '\a', '\x6', '\x2', '\x2', '\x177', '\x178', '\x5', 
		'\x14', '\v', '\x2', '\x178', '\x179', '\a', '\v', '\x2', '\x2', '\x179', 
		'\x17A', '\x5', '\x1C', '\xF', '\x2', '\x17A', '\x17C', '\x3', '\x2', 
		'\x2', '\x2', '\x17B', '\x174', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', '\x3', '\x2', '\x2', '\x2', 
		'\x17D', '\x17E', '\a', ')', '\x2', '\x2', '\x17E', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x17F', '\x184', '\a', '\x32', '\x2', '\x2', '\x180', '\x181', 
		'\a', '\b', '\x2', '\x2', '\x181', '\x183', '\a', '\x32', '\x2', '\x2', 
		'\x182', '\x180', '\x3', '\x2', '\x2', '\x2', '\x183', '\x186', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\x182', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x185', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x186', '\x184', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', 
		'\a', '\x5', '\x2', '\x2', '\x188', '\x189', '\a', '*', '\x2', '\x2', 
		'\x189', 'M', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18F', '\x5', '\x1C', 
		'\xF', '\x2', '\x18B', '\x18C', '\a', '\x1A', '\x2', '\x2', '\x18C', '\x18E', 
		'\x5', '\x1C', '\xF', '\x2', '\x18D', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'\x18E', '\x191', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x18D', '\x3', 
		'\x2', '\x2', '\x2', '\x18F', '\x190', '\x3', '\x2', '\x2', '\x2', '\x190', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x191', '\x18F', '\x3', '\x2', '\x2', 
		'\x2', '\x192', '\x193', '\t', '\x5', '\x2', '\x2', '\x193', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x194', '\x195', '\t', '\x6', '\x2', '\x2', '\x195', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x196', '\x197', '\t', '\a', '\x2', 
		'\x2', '\x197', 'U', '\x3', '\x2', '\x2', '\x2', '\x198', '\x199', '\t', 
		'\b', '\x2', '\x2', '\x199', 'W', '\x3', '\x2', '\x2', '\x2', '\x19A', 
		'\x19B', '\t', '\t', '\x2', '\x2', '\x19B', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\x19C', '\x19D', '\t', '\n', '\x2', '\x2', '\x19D', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x19E', '\x19F', '\t', '\v', '\x2', '\x2', '\x19F', 
		']', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', '\t', '\f', '\x2', 
		'\x2', '\x1A1', '_', '\x3', '\x2', '\x2', '\x2', '*', 'g', 'n', 'v', '|', 
		'\x81', '\x87', '\x91', '\x9E', '\xA1', '\xA5', '\xAF', '\xBE', '\xC2', 
		'\xD5', '\xDE', '\xE6', '\xEF', '\xF6', '\xFE', '\x107', '\x10E', '\x115', 
		'\x120', '\x124', '\x127', '\x12F', '\x133', '\x13E', '\x14A', '\x14D', 
		'\x154', '\x159', '\x15C', '\x15F', '\x162', '\x16D', '\x172', '\x17B', 
		'\x184', '\x18F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
