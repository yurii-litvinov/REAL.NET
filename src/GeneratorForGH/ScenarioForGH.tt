/* Copyright 2017-2018 REAL.NET group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

<#@ template language="C#" debug="True" linePragmas="false"#>
<#@ output extension="cs" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
namespace GeneratorForGH
{
	using System;
	using System.Linq;
	using System.Reactive;
	using System.Reactive.Linq;
	using System.Reactive.Subjects;
	using RobotSimulation;
	using Trik;

	public class GeneratedCode
    {
<#
List<Repo.INode> modelNodes = new List<Repo.INode>();
foreach (var x in Repository.Model("GreenhouseTestModel").Nodes) {
	modelNodes.Add(x);
}
	
foreach (var x in modelNodes) { #>
		private static <#= classOfElement(x.Name) #> element<#= modelNodes.IndexOf(x)#>;
<# } #>

		private static void Main(string[] args)
		{
            Console.WriteLine("Initial values:");
<# 
foreach (var x in modelNodes) { 
	var index = modelNodes.IndexOf(x); #>

			element<#= index#> = new <#= classOfElement(x.Name) #>(<#= index#>);
	<# 
	if (classOfElement(x.Name) == "Interval")
	{
			var minEnum = x.Attributes.Where(y => y.Name == "min").AsEnumerable();
			var maxEnum = x.Attributes.Where(y => y.Name == "max").AsEnumerable();
			if (minEnum.Any() && maxEnum.Any())
			{
				string min = minEnum.First().StringValue ?? "null";
				string max = maxEnum.First().StringValue ?? "null"; #>

			element<#= index#>.Min = <#= min #>;
			element<#= index#>.Max = <#= max #>;
            Console.WriteLine("Interval {0}: min -- {1}, max -- {2}", <#= index#>, <#= min #>, <#= max #>);
			<#}
	}
	if (classOfElement(x.Name) == "Operation")
	{#>

			element<#= index#>.Kind = "<#= kindOfOperation(x.Name)#>";
	<#}#>

			IObservable<int> observable<#= index #> =
						System.Reactive.Linq.Observable.FromEventPattern<int>(
							h => element<#= index #>.Event += h,
							h => element<#= index #>.Event -= h)
							.Select(e => e.EventArgs)
							.Synchronize().DistinctUntilChanged();
			IObserver<int> observer<#= index#> = Observer.Create<int>(x => element<#= index#>.Action(x));
			ISubject<int> reactElement<#= index#> = Subject.Create<int>(observer<#= index#>, observable<#= index#>);
	    <#
}#>

<#

foreach (var x in Repository.Model("GreenhouseTestModel").Edges) {
	if (classOfElement(x.To.Name) == "Operation") { #>

			element<#= modelNodes.IndexOf((Repo.INode)x.To)#>.IncomingValues.Add(<#= modelNodes.IndexOf((Repo.INode)x.From)#>, null);
	<# }
}
#>

			// index of the element and index of the reactElement which is made on it's basis are the same 
<#

int j = 0;
foreach (var x in Repository.Model("GreenhouseTestModel").Edges) 
{ 
	var source = x.From as Repo.INode;
	var target = x.To as Repo.INode; #>
			var sub<#= j #> = reactElement<#= modelNodes.IndexOf(source) #>.Subscribe(reactElement<#= modelNodes.IndexOf(target) #>);
<#
	j++;
} 
            if (!TestWithRobotSimulation) { #>
			var robot = new Model();
            <# }

            // defining ports for sensors, actuators and connecting them with real(or RobotSimulation) sensors/actuators 
			foreach (var x in modelNodes) { 
				if (classOfElement(x.Name) == "Sensor") { 
					var port = x.Attributes.Where(y => y.Name == "port").AsEnumerable();
					if (port.Any())
					{
						string p = port.First().StringValue; 
                        if (TestWithRobotSimulation) { #>
            SensorSim sensorSim<#= modelNodes.IndexOf(x) #> = new SensorSim(<#= p #>);
			sensorSim<#= modelNodes.IndexOf(x) #>.Index = <#= modelNodes.IndexOf(x) #>;
            Console.WriteLine("Sensor{0}: sensor at port {1}", <#= modelNodes.IndexOf(x) #>, <#= p #>);

            IObservable<int> observableForSimulation<#= modelNodes.IndexOf(x) #> =
						System.Reactive.Linq.Observable.FromEventPattern<int>(
							h => sensorSim<#= modelNodes.IndexOf(x) #>.Event += h,
							h => sensorSim<#= modelNodes.IndexOf(x) #>.Event -= h)
							.Select(e => e.EventArgs)
							.Synchronize().DistinctUntilChanged();

            observableForSimulation<#= modelNodes.IndexOf(x) #>.Subscribe(reactElement<#= modelNodes.IndexOf(x) #>);
                        <# }
                        else { #>

			var s\<#= modelNodes.IndexOf(x) \#> = robot.AnalogSensors[Trik.Sensor.A\<#= p \#>].ToObservable().DistinctUntilChanged();
			s\<#= modelNodes.IndexOf(x) \#>.Subscribe(reactElement\<#= modelNodes.IndexOf(x) \#>);
                        <# }
                     }
				}
				if (classOfElement(x.Name) == "Actuator") { 
					var port = x.Attributes.Where(y => y.Name == "port").AsEnumerable();
					if (port.Any())
					{
						string p = port.First().StringValue; #>
			
            Console.WriteLine("Actuator{0}: actuator at port {1}", <#= modelNodes.IndexOf(x) #>, <#= p #>);

                        <# if (TestWithRobotSimulation) { #>
			IObserver<int> observerForSimulation<#= modelNodes.IndexOf(x) #> = Observer.Create<int>(x => Console.WriteLine("----- Actuator at port {0} -- {1}  -----", <#= p #>, x));
			reactElement<#= modelNodes.IndexOf(x) #>.Subscribe(observerForSimulation<#= modelNodes.IndexOf(x) #>);
                        <# }
                        else { #>
            reactElement\<#= modelNodes.IndexOf(x) \#>.Subscribe(robot.Motors[Trik.Motor.M\<#= p \#>]);
                        <# }
					}
				}
			} #>

            Console.ReadLine();
        }
    }
}

<#+ 
string classOfElement(string name)
{
	switch(name)
	{
		case "aOpenWindow":
			return "Actuator";
		case "aCloseWindow":
			return "Actuator";
		case "aPourSoil":
			return "Actuator";
		case "aAirTemperature":
			return "Sensor";
		case "aSoilTemperature":
			return "Sensor";
		case "aInterval":
			return "Interval";
		case "aAndOperation":
			return "Operation";
		case "aOrOperation":
			return "Operation";
		default:
			return "Sensor";
	}
}

string kindOfOperation(string name)
{
	switch(name)
	{
		case "aAndOperation":
			return "And";
		case "aOrOperation":
			return "Or";
		default:
			return "And";
	}
}

public Repo.IRepo Repository { get; set; }
public bool TestWithRobotSimulation { get; set; }
#>